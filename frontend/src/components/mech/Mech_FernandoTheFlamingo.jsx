/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/mech/Mech_FernandoTheFlamingo.gltf -o src/components/mech/Mech_FernandoTheFlamingo.jsx -r public 
*/

import React, { useEffect, useMemo, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useGraph } from '@react-three/fiber';
import { SkeletonUtils } from 'three-stdlib';
import { LoopOnce } from 'three';

export function MechFernandoTheFlamingo({
  color = "black",
  animation = "Idle",
  animal = "flamingo",
  ...props
}) {
  const group = useRef();
  const { scene, materials, animations } = useGLTF('/models/mech/Mech_FernandoTheFlamingo.gltf')
  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);
  const { actions } = useAnimations(animations, group);

  if (actions["Death"]) {
    actions["Death"].loop = LoopOnce;
    actions["Death"].clampWhenFinished = true;
  }

  useEffect(() => {
    actions[animation].reset().fadeIn(0.2).play();
    return () => actions[animation]?.fadeOut(0.2);
  }, [animation, actions]);

  /**
   * actions
   * 
   * Dance, Death, Hello, HitReceive_1, HitReceive_2, 
   * Idle, Jump, Jump_Landing, Jump_NoHeight, Kick, 
   * No, Pickup, Run, Shoot_Big, Shoot_Small, Walk, Yes
   */

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="RobotArmature">
          <primitive object={nodes.Body} />
          <primitive object={nodes.FootL} />
          <primitive object={nodes.FootR} />
          <skinnedMesh
            name="FernandoTheFlamingo"
            geometry={nodes.FernandoTheFlamingo.geometry}
            material={materials.Atlas}
            skeleton={nodes.FernandoTheFlamingo.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/mech/Mech_FernandoTheFlamingo.gltf')
